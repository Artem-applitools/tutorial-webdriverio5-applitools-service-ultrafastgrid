// should extract text from regions
const cwd = process.cwd()
const path = require('path')
const assert = require('assert')
const spec = require(path.resolve(cwd, 'src/spec-driver'))
const {testSetup, getTestInfo} = require('@applitools/sdk-shared')

describe('Coverage Tests', () => {
  let driver, destroyDriver, eyes
  beforeEach(async () => {
    ;[driver, destroyDriver] = await spec.build({browser: 'chrome'})
    eyes = testSetup.getEyes({
      displayName: 'should extract text from regions',
      stitchMode: 'CSS',
      baselineName: 'ShouldExtractTextFromRegions',
    })
  })
  afterEach(async () => {
    await destroyDriver(driver)
    await eyes.abort()
  })
  it('should extract text from regions', async () => {
    await spec.visit(
      driver,
      'https://applitools.github.io/demo/TestPages/PageWithHeader/index.html'
    )
    await eyes.open(
      driver,
      'Applitools Eyes SDK',
      'ShouldExtractTextFromRegions',
      undefined
    )
    const element = await spec.findElement(driver, {
      type: 'css',
      selector: '.page h1',
    })
    const texts = await eyes.extractText([
      {
        target: {left: 38, top: 38, width: 213, height: 23},
        hint: 'This is the navigation bar',
      },
      {target: element},
      {target: '.page p:nth-of-type(3)'},
    ])
    await eyes.close(false)
    assert.deepStrictEqual(texts['0'], 'This is the navigation bar', undefined)
    assert.deepStrictEqual(texts['1'], 'Lorem Ipsum', undefined)
    assert.deepStrictEqual(
      texts['2'],
      'Donec aliquam ipsum sit amet tellus sagittis fringilla. Nunc ullamcorper nisl id\nporta mollis. Aliquam odio tortor, gravida nec accumsan id, sollicitudin id est.\nVivamus at lacinia leo. Aliquam pharetra metus quis tellus eleifend consectetur.\nDonec sagittis venenatis fermentum. Praesent fermentum dignissim iaculis.',
      undefined
    )
  })
})
